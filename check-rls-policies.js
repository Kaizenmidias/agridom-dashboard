// Script para verificar e corrigir pol√≠ticas RLS do Supabase
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

console.log('üîí VERIFICA√á√ÉO DE POL√çTICAS RLS - SUPABASE');
console.log('==========================================');

// Usar service role key para verificar pol√≠ticas
const supabaseUrl = process.env.SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
  console.log('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  process.exit(1);
}

const supabaseAdmin = createClient(supabaseUrl, serviceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Verificar pol√≠ticas RLS existentes
async function checkRLSPolicies() {
  try {
    console.log('\n1. VERIFICANDO POL√çTICAS RLS EXISTENTES:');
    
    // Query para verificar pol√≠ticas RLS
    const { data: policies, error } = await supabaseAdmin
      .from('pg_policies')
      .select('*')
      .in('tablename', ['users', 'projects', 'expenses', 'codes', 'briefings']);
    
    if (error) {
      console.log('‚ùå Erro ao verificar pol√≠ticas:', error.message);
      return false;
    }
    
    console.log(`‚úÖ Encontradas ${policies.length} pol√≠ticas RLS`);
    
    // Agrupar por tabela
    const policiesByTable = {};
    policies.forEach(policy => {
      if (!policiesByTable[policy.tablename]) {
        policiesByTable[policy.tablename] = [];
      }
      policiesByTable[policy.tablename].push(policy);
    });
    
    // Mostrar pol√≠ticas por tabela
    Object.keys(policiesByTable).forEach(tableName => {
      console.log(`\nüìã Tabela: ${tableName}`);
      policiesByTable[tableName].forEach(policy => {
        console.log(`   - ${policy.policyname} (${policy.cmd})`);
      });
    });
    
    return true;
  } catch (error) {
    console.log('‚ùå Erro ao verificar pol√≠ticas RLS:', error.message);
    return false;
  }
}

// Verificar se RLS est√° habilitado nas tabelas
async function checkRLSEnabled() {
  try {
    console.log('\n2. VERIFICANDO SE RLS EST√Å HABILITADO:');
    
    const tables = ['users', 'projects', 'expenses', 'codes', 'briefings'];
    
    for (const tableName of tables) {
      const { data, error } = await supabaseAdmin
        .rpc('check_rls_enabled', { table_name: tableName })
        .single();
      
      if (error) {
        // Se a fun√ß√£o n√£o existir, tentar m√©todo alternativo
        console.log(`‚ö†Ô∏è ${tableName}: N√£o foi poss√≠vel verificar RLS`);
        continue;
      }
      
      console.log(`${data ? 'üîí' : 'üîì'} ${tableName}: RLS ${data ? 'HABILITADO' : 'DESABILITADO'}`);
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Erro ao verificar status RLS:', error.message);
    return false;
  }
}

// Testar acesso √†s tabelas com usu√°rio an√¥nimo
async function testAnonymousAccess() {
  try {
    console.log('\n3. TESTANDO ACESSO AN√îNIMO:');
    
    // Criar cliente com chave an√¥nima
    const anonKey = process.env.VITE_SUPABASE_ANON_KEY;
    const supabaseAnon = createClient(supabaseUrl, anonKey);
    
    const tables = ['users', 'projects', 'expenses'];
    
    for (const tableName of tables) {
      try {
        const { data, error } = await supabaseAnon
          .from(tableName)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå ${tableName}: ${error.message}`);
        } else {
          console.log(`‚úÖ ${tableName}: Acesso permitido (${data.length} registros)`);
        }
      } catch (err) {
        console.log(`‚ùå ${tableName}: ${err.message}`);
      }
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Erro no teste de acesso an√¥nimo:', error.message);
    return false;
  }
}

// Criar pol√≠ticas RLS b√°sicas se necess√°rio
async function createBasicRLSPolicies() {
  try {
    console.log('\n4. CRIANDO POL√çTICAS RLS B√ÅSICAS:');
    
    // Pol√≠tica para permitir leitura de usu√°rios autenticados
    const policies = [
      {
        table: 'users',
        name: 'Users can view all users',
        operation: 'SELECT',
        policy: 'true' // Permitir leitura para todos (pode ser restringido depois)
      },
      {
        table: 'projects',
        name: 'Users can view all projects',
        operation: 'SELECT',
        policy: 'true'
      },
      {
        table: 'expenses',
        name: 'Users can view all expenses',
        operation: 'SELECT',
        policy: 'true'
      }
    ];
    
    for (const policyDef of policies) {
      try {
        // Primeiro, tentar remover pol√≠tica existente
        await supabaseAdmin.rpc('drop_policy_if_exists', {
          table_name: policyDef.table,
          policy_name: policyDef.name
        });
        
        // Criar nova pol√≠tica
        const { error } = await supabaseAdmin.rpc('create_policy', {
          table_name: policyDef.table,
          policy_name: policyDef.name,
          operation: policyDef.operation,
          policy_definition: policyDef.policy
        });
        
        if (error) {
          console.log(`‚ö†Ô∏è ${policyDef.table}: ${error.message}`);
        } else {
          console.log(`‚úÖ ${policyDef.table}: Pol√≠tica criada`);
        }
      } catch (err) {
        console.log(`‚ö†Ô∏è ${policyDef.table}: ${err.message}`);
      }
    }
    
    return true;
  } catch (error) {
    console.log('‚ùå Erro ao criar pol√≠ticas RLS:', error.message);
    return false;
  }
}

// Executar todas as verifica√ß√µes
async function runRLSCheck() {
  console.log('üîç Iniciando verifica√ß√£o de pol√≠ticas RLS...');
  
  await checkRLSPolicies();
  await checkRLSEnabled();
  await testAnonymousAccess();
  
  console.log('\nüí° RECOMENDA√á√ïES:');
  console.log('================');
  console.log('1. Se houver erros de "Auth session missing", as pol√≠ticas RLS podem estar muito restritivas');
  console.log('2. Para desenvolvimento, considere desabilitar RLS temporariamente');
  console.log('3. Para produ√ß√£o, configure pol√≠ticas espec√≠ficas por usu√°rio/role');
  console.log('4. Verifique se o frontend est√° enviando tokens de autentica√ß√£o corretamente');
  
  console.log('\nüîß COMANDOS SQL √öTEIS:');
  console.log('======================');
  console.log('-- Desabilitar RLS (tempor√°rio):');
  console.log('ALTER TABLE users DISABLE ROW LEVEL SECURITY;');
  console.log('ALTER TABLE projects DISABLE ROW LEVEL SECURITY;');
  console.log('ALTER TABLE expenses DISABLE ROW LEVEL SECURITY;');
  console.log('');
  console.log('-- Habilitar RLS:');
  console.log('ALTER TABLE users ENABLE ROW LEVEL SECURITY;');
  console.log('ALTER TABLE projects ENABLE ROW LEVEL SECURITY;');
  console.log('ALTER TABLE expenses ENABLE ROW LEVEL SECURITY;');
}

// Executar verifica√ß√£o
runRLSCheck().catch(error => {
  console.error('‚ùå Erro durante a verifica√ß√£o RLS:', error);
  process.exit(1);
});