const mysql = require('mysql2/promise');
require('dotenv').config();

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'agri_dom',
  port: process.env.DB_PORT || 3306
};

async function checkAdminPermissions() {
  let connection;
  
  try {
    console.log('üîç Verificando permiss√µes do usu√°rio administrador...');
    
    // Conectar ao banco de dados
    connection = await mysql.createConnection(dbConfig);
    
    // Verificar as permiss√µes do usu√°rio administrador
    const [rows] = await connection.execute(`
      SELECT 
        full_name, 
        email, 
        position,
        can_access_dashboard,
        can_access_projects,
        can_access_briefings,
        can_access_codes,
        can_access_expenses,
        can_access_crm,
        can_access_users
      FROM users 
      WHERE email = 'agenciakaizendesign@gmail.com'
    `);
    
    if (rows.length === 0) {
      console.log('‚ùå Usu√°rio administrador n√£o encontrado!');
      return;
    }
    
    const user = rows[0];
    
    console.log('‚úÖ Usu√°rio Administrador encontrado:');
    console.log('üìã Dados do usu√°rio:');
    console.log(`   Nome: ${user.full_name}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Cargo: ${user.position}`);
    console.log('üîê Permiss√µes:');
    console.log(`   Dashboard: ${user.can_access_dashboard ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Projetos: ${user.can_access_projects ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Briefings: ${user.can_access_briefings ? '‚úÖ' : '‚ùå'}`);
    console.log(`   C√≥digos: ${user.can_access_codes ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Despesas: ${user.can_access_expenses ? '‚úÖ' : '‚ùå'}`);
    console.log(`   CRM: ${user.can_access_crm ? '‚úÖ' : '‚ùå'}`);
    console.log(`   Usu√°rios: ${user.can_access_users ? '‚úÖ' : '‚ùå'}`);
    
    // Verificar se alguma permiss√£o est√° como null ou false
    const permissions = {
      can_access_dashboard: user.can_access_dashboard,
      can_access_projects: user.can_access_projects,
      can_access_briefings: user.can_access_briefings,
      can_access_codes: user.can_access_codes,
      can_access_expenses: user.can_access_expenses,
      can_access_crm: user.can_access_crm,
      can_access_users: user.can_access_users
    };
    
    console.log('\nüîß An√°lise das permiss√µes:');
    let hasIssues = false;
    
    Object.entries(permissions).forEach(([key, value]) => {
      if (value === null || value === 0 || value === false) {
        console.log(`   ‚ö†Ô∏è  ${key}: ${value} (BLOQUEADO)`);
        hasIssues = true;
      } else {
        console.log(`   ‚úÖ ${key}: ${value}`);
      }
    });
    
    if (hasIssues) {
      console.log('\n‚ùå PROBLEMA IDENTIFICADO: O administrador tem permiss√µes bloqueadas!');
      console.log('üí° Solu√ß√£o: Atualizar as permiss√µes do administrador para true em todas as funcionalidades.');
    } else {
      console.log('\n‚úÖ Todas as permiss√µes do administrador est√£o corretas!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar permiss√µes:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

checkAdminPermissions();