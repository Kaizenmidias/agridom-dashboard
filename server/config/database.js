const { Pool } = require('pg');

// Configura√ß√£o do banco de dados
let pool;

// Configurar string de conex√£o com prioridade para dashboard_POSTGRES_URL
let connectionString;
if (process.env.dashboard_POSTGRES_URL) {
  connectionString = process.env.dashboard_POSTGRES_URL;
} else if (process.env.SUPABASE_DATABASE_URL) {
  connectionString = process.env.SUPABASE_DATABASE_URL;
} else {
  // Fallback para vari√°veis individuais do Supabase
  const host = process.env.dashboard_POSTGRES_HOST || 'localhost';
  const port = process.env.dashboard_POSTGRES_PORT || 5432;
  const database = process.env.dashboard_POSTGRES_DATABASE || 'postgres';
  const user = process.env.dashboard_POSTGRES_USER || 'postgres';
  const password = process.env.dashboard_POSTGRES_PASSWORD || '';
  connectionString = `postgres://${user}:${password}@${host}:${port}/${database}`;
}

// Desabilitar SSL completamente para resolver certificados autoassinados
if (!connectionString.includes('sslmode')) {
  const separator = connectionString.includes('?') ? '&' : '?';
  connectionString += `${separator}sslmode=disable`;
}

console.log('üîó Server DB Connection string configurada:', connectionString ? 'Sim' : 'N√£o');

pool = new Pool({
  connectionString,
  ssl: false,
  max: 20,
  min: 0,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 10000,
  acquireTimeoutMillis: 10000,
});

console.log('‚úÖ Server Pool de conex√£o DB criado');

// Fun√ß√£o para executar queries
async function query(text, params = []) {
  const start = Date.now();
  try {
    const res = await pool.query(text, params);
    const duration = Date.now() - start;
    
    if (process.env.NODE_ENV === 'development') {
      console.log('Executed query:', { text, duration, rows: res.rowCount });
    }
    
    return res;
  } catch (error) {
    console.error('Database query error:', error);
    throw error;
  }
}

// Fun√ß√£o para testar a conex√£o
async function testConnection() {
  try {
    const result = await query('SELECT NOW() as current_time');
    console.log('‚úÖ Conex√£o com o banco de dados estabelecida:', result.rows[0].current_time);
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao conectar com o banco de dados:', error.message);
    return false;
  }
}

// Fun√ß√£o para fechar a conex√£o
async function closeConnection() {
  try {
    await pool.end();
    console.log('üîå Conex√£o com o banco de dados fechada');
  } catch (error) {
    console.error('Erro ao fechar conex√£o:', error);
  }
}

module.exports = {
  query,
  testConnection,
  closeConnection,
  pool
};