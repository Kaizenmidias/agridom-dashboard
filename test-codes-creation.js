// Script para testar cria√ß√£o de c√≥digos e validar corre√ß√£o do erro 409
// Execute com: node test-codes-creation.js

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configurar cliente Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  console.log('Certifique-se de que VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o definidas no .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testCodeCreation() {
  console.log('üß™ Testando cria√ß√£o de c√≥digos ap√≥s corre√ß√µes...');
  console.log('üìç URL Supabase:', supabaseUrl.substring(0, 30) + '...');
  
  try {
    // 1. Verificar se existe usu√°rio ativo
    console.log('\n1Ô∏è‚É£ Verificando usu√°rios ativos...');
    const { data: users, error: userError } = await supabase
      .from('users')
      .select('id, email, name, is_active')
      .eq('is_active', true)
      .limit(5);
    
    if (userError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', userError);
      return;
    }
    
    if (!users || users.length === 0) {
      console.error('‚ùå Nenhum usu√°rio ativo encontrado');
      console.log('üí° Execute o script create-test-user.sql primeiro');
      return;
    }
    
    console.log('‚úÖ Usu√°rios ativos encontrados:', users.length);
    users.forEach(user => {
      console.log(`   - ID: ${user.id}, Email: ${user.email}, Nome: ${user.name}`);
    });
    
    const userId = users[0].id;
    
    // 2. Testar inser√ß√£o de c√≥digo usando SDK (m√©todo correto)
    console.log('\n2Ô∏è‚É£ Testando inser√ß√£o de c√≥digo usando SDK do Supabase...');
    
    const timestamp = Date.now();
    const codeData = {
      title: `Teste SDK ${timestamp}`,
      language: 'javascript',
      code_content: `// C√≥digo de teste criado em ${new Date().toISOString()}\nconsole.log('Hello World from SDK!');`,
      description: 'C√≥digo de teste criado via SDK do Supabase',
      user_id: userId
    };
    
    console.log('üì§ Dados do c√≥digo:', codeData);
    
    // M√©todo correto: usar SDK sem querystring
    const { data: codeResult, error: codeError } = await supabase
      .from('codes')
      .insert(codeData)
      .select('*')
      .single();
    
    if (codeError) {
      console.error('‚ùå Erro 409 ou outro erro:', codeError);
      console.error('üìã Detalhes completos:', JSON.stringify(codeError, null, 2));
      
      // Analisar tipo de erro
      if (codeError.code === '23503') {
        console.log('üí° Erro de foreign key - user_id n√£o existe');
      } else if (codeError.code === '23505') {
        console.log('üí° Erro de duplica√ß√£o - registro j√° existe');
      } else if (codeError.code === '23514') {
        console.log('üí° Erro de constraint - verifique language (css, html, javascript)');
      } else if (codeError.message.includes('409')) {
        console.log('üí° Erro 409 Conflict - problema com a requisi√ß√£o');
      }
    } else {
      console.log('‚úÖ C√≥digo criado com sucesso via SDK!');
      console.log('üìã Resultado:', {
        id: codeResult.id,
        title: codeResult.title,
        language: codeResult.language,
        user_id: codeResult.user_id,
        created_at: codeResult.created_at
      });
    }
    
    // 3. Verificar se o c√≥digo foi realmente inserido
    console.log('\n3Ô∏è‚É£ Verificando se o c√≥digo foi inserido na tabela...');
    
    const { data: allCodes, error: selectError } = await supabase
      .from('codes')
      .select('id, title, language, created_at')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (selectError) {
      console.error('‚ùå Erro ao buscar c√≥digos:', selectError);
    } else {
      console.log('‚úÖ √öltimos c√≥digos na tabela:');
      allCodes.forEach(code => {
        console.log(`   - ID: ${code.id}, T√≠tulo: ${code.title}, Language: ${code.language}`);
      });
    }
    
    // 4. Demonstrar o m√©todo INCORRETO que causa erro 409
    console.log('\n4Ô∏è‚É£ Demonstrando m√©todo INCORRETO (REST API com querystring)...');
    console.log('‚ùå NUNCA fa√ßa assim:');
    console.log(`   POST ${supabaseUrl}/rest/v1/codes?columns="title","language","code_content","description","user_id"&select=*`);
    console.log('   ‚òùÔ∏è Isso causa erro 409 porque querystring n√£o deve ser usada em POST');
    
    console.log('\n‚úÖ M√©todo CORRETO (SDK do Supabase):');
    console.log('   supabase.from(\'codes\').insert(data).select(\'*\').single()');
    console.log('   ‚òùÔ∏è SDK envia dados no body JSON automaticamente');
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
  }
}

// Executar teste
testCodeCreation();