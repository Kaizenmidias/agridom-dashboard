// Script para executar no console do navegador em PRODU√á√ÉO
// Abra DevTools (F12) > Console e cole este c√≥digo

console.log('üöÄ INICIANDO DEBUG DE PRODU√á√ÉO');
console.log('==========================================');

// 1. Verificar se estamos em produ√ß√£o
console.log('\n1. VERIFICANDO AMBIENTE:');
console.log('URL atual:', window.location.href);
console.log('Host:', window.location.host);
console.log('Protocol:', window.location.protocol);

// 2. Tentar acessar as vari√°veis de ambiente
console.log('\n2. VERIFICANDO VARI√ÅVEIS DE AMBIENTE:');
try {
  // Estas vari√°veis s√≥ existem durante o build, n√£o em runtime
  console.log('‚ö†Ô∏è IMPORTANTE: import.meta.env s√≥ existe durante o build!');
  console.log('Em produ√ß√£o, as vari√°veis s√£o "baked in" no c√≥digo compilado.');
} catch (e) {
  console.log('‚ùå import.meta.env n√£o dispon√≠vel em runtime:', e.message);
}

// 3. Verificar se o cliente Supabase foi inicializado
console.log('\n3. VERIFICANDO CLIENTE SUPABASE:');
try {
  // Tentar acessar o m√≥dulo Supabase
  const supabaseModule = await import('/assets/index-DwkcV7sV.js');
  console.log('‚úÖ M√≥dulo principal carregado');
} catch (e) {
  console.log('‚ùå Erro ao carregar m√≥dulo:', e.message);
  
  // Tentar m√©todo alternativo
  try {
    // Verificar se h√° alguma refer√™ncia global ao Supabase
    console.log('üîç Procurando refer√™ncias globais...');
    console.log('window.supabase:', window.supabase);
    console.log('window.__SUPABASE__:', window.__SUPABASE__);
    
    // Verificar se h√° logs do Supabase no console
    console.log('\n4. VERIFICANDO LOGS ANTERIORES:');
    console.log('Procure nos logs acima por mensagens que come√ßam com:');
    console.log('- üöÄ MAIN.TSX');
    console.log('- üîç SUPABASE.TS');
    console.log('- üîç CRUD.TS');
    console.log('- üîç SUPABASE-CLIENT');
    
  } catch (e2) {
    console.log('‚ùå Erro no m√©todo alternativo:', e2.message);
  }
}

// 4. Verificar Network tab
console.log('\n5. VERIFICANDO NETWORK:');
console.log('Abra DevTools > Network e filtre por:');
console.log('- "supabase" para ver chamadas para o Supabase');
console.log('- "qwbpruywwfjadkudegcj" para ver chamadas espec√≠ficas');
console.log('- "rest/v1" para ver chamadas da API REST');

// 5. Tentar fazer uma chamada manual
console.log('\n6. TESTE MANUAL DE CHAMADA:');
console.log('Se voc√™ n√£o vir chamadas para o Supabase, tente:');
console.log('1. Navegar para uma p√°gina (ex: /projects)');
console.log('2. Recarregar a p√°gina');
console.log('3. Verificar se aparecem logs de debug');

// 6. Verificar se h√° erros JavaScript
console.log('\n7. VERIFICANDO ERROS:');
console.log('Verifique se h√° erros JavaScript na aba Console');
console.log('Erros comuns:');
console.log('- "Cannot read property of undefined"');
console.log('- "Module not found"');
console.log('- "Failed to fetch"');

console.log('\n==========================================');
console.log('‚úÖ DEBUG CONCLU√çDO');
console.log('Analise os logs acima e na aba Network para identificar o problema.');

// 7. Fun√ß√£o helper para monitorar chamadas
window.monitorSupabase = function() {
  console.log('üîç Iniciando monitoramento de chamadas...');
  
  // Override do fetch para capturar chamadas
  const originalFetch = window.fetch;
  window.fetch = function(...args) {
    const url = args[0];
    if (typeof url === 'string' && url.includes('supabase')) {
      console.log('üì° CHAMADA SUPABASE DETECTADA:', url);
      console.log('üìä Argumentos:', args);
    }
    return originalFetch.apply(this, args);
  };
  
  console.log('‚úÖ Monitoramento ativo. Navegue pela aplica√ß√£o para ver chamadas.');
};

console.log('\nüí° DICA: Execute window.monitorSupabase() para monitorar chamadas em tempo real.');