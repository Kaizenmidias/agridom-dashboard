const axios = require('axios');

async function testFrontendSimulation() {
  try {
    console.log('üîç Simulando comportamento do frontend...');
    
    // 1. Login como administrador (simula o que o frontend faz)
    console.log('\n1. Fazendo login como administrador...');
    const loginResponse = await axios.post('http://localhost:3001/api/auth/login', {
      email: 'agenciakaizendesign@gmail.com',
      password: 'Beatriz@2908'
    });
    
    const { user: adminUser, token } = loginResponse.data;
    console.log('‚úÖ Login realizado com sucesso!');
    console.log(`üë§ Usu√°rio: ${adminUser.full_name} (${adminUser.position})`);
    console.log(`üîê can_access_users: ${adminUser.can_access_users}`);
    
    // 2. Verificar se isAdmin seria true no frontend
    const isAdmin = adminUser?.position === 'Administrador';
    console.log(`\n2. Verifica√ß√£o isAdmin (frontend): ${isAdmin ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (!isAdmin) {
      console.log('‚ùå PROBLEMA: isAdmin √© false, bot√µes de edi√ß√£o n√£o aparecer√£o!');
      return;
    }
    
    // 3. Buscar usu√°rios (simula useUsers hook)
    console.log('\n3. Buscando usu√°rios (simula useUsers hook)...');
    const usersResponse = await axios.get('http://localhost:3001/api/users', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    const usuarios = usersResponse.data;
    console.log(`‚úÖ Usu√°rios encontrados: ${usuarios.length}`);
    
    // 4. Simular sele√ß√£o de um usu√°rio para editar
    const otherUsers = usuarios.filter(u => u.id !== adminUser.id);
    if (otherUsers.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum outro usu√°rio encontrado para testar edi√ß√£o');
      return;
    }
    
    const selectedUser = otherUsers[0];
    console.log(`\n4. Simulando edi√ß√£o do usu√°rio: ${selectedUser.full_name} (${selectedUser.email})`);
    console.log('üìã Dados atuais do usu√°rio:');
    console.log(`   - can_access_dashboard: ${selectedUser.can_access_dashboard}`);
    console.log(`   - can_access_briefings: ${selectedUser.can_access_briefings}`);
    console.log(`   - can_access_codes: ${selectedUser.can_access_codes}`);
    console.log(`   - can_access_projects: ${selectedUser.can_access_projects}`);
    console.log(`   - can_access_expenses: ${selectedUser.can_access_expenses}`);
    console.log(`   - can_access_crm: ${selectedUser.can_access_crm}`);
    console.log(`   - can_access_users: ${selectedUser.can_access_users}`);
    
    // 5. Simular altera√ß√£o de permiss√µes (como o frontend faria)
    console.log('\n5. Simulando altera√ß√£o de permiss√µes...');
    const updatedPermissions = {
      full_name: selectedUser.full_name,
      email: selectedUser.email,
      position: selectedUser.position,
      is_active: selectedUser.is_active,
      can_access_dashboard: selectedUser.can_access_dashboard,
      can_access_briefings: !selectedUser.can_access_briefings, // Inverter para testar
      can_access_codes: selectedUser.can_access_codes,
      can_access_projects: selectedUser.can_access_projects,
      can_access_expenses: selectedUser.can_access_expenses,
      can_access_crm: selectedUser.can_access_crm,
      can_access_users: selectedUser.can_access_users
    };
    
    console.log(`üìù Alterando can_access_briefings de ${selectedUser.can_access_briefings} para ${updatedPermissions.can_access_briefings}`);
    
    // 6. Simular chamada da API updateUser (como o frontend faria)
    console.log('\n6. Simulando chamada updateUser...');
    const updateResponse = await axios.put(`http://localhost:3001/api/users/${selectedUser.id}`, updatedPermissions, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    console.log('‚úÖ Usu√°rio atualizado com sucesso!');
    
    // 7. Verificar se a altera√ß√£o foi salva
    console.log('\n7. Verificando se a altera√ß√£o foi salva...');
    const verifyResponse = await axios.get(`http://localhost:3001/api/users/${selectedUser.id}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    const updatedUser = verifyResponse.data;
    console.log(`‚úÖ Verifica√ß√£o: can_access_briefings agora √© ${updatedUser.can_access_briefings}`);
    
    if (updatedUser.can_access_briefings === updatedPermissions.can_access_briefings) {
      console.log('‚úÖ Altera√ß√£o salva corretamente!');
    } else {
      console.log('‚ùå PROBLEMA: Altera√ß√£o n√£o foi salva!');
    }
    
    // 8. Simular refreshUserData se o usu√°rio editado fosse o pr√≥prio admin
    if (selectedUser.id === adminUser.id) {
      console.log('\n8. Simulando refreshUserData (usu√°rio editou a si mesmo)...');
      const refreshResponse = await axios.get('http://localhost:3001/api/auth/verify', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      console.log('‚úÖ Dados do usu√°rio atualizados via refreshUserData');
    }
    
    // 9. Simular refetch da lista de usu√°rios
    console.log('\n9. Simulando refetch da lista de usu√°rios...');
    const refetchResponse = await axios.get('http://localhost:3001/api/users', {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    const refetchedUsers = refetchResponse.data;
    const refetchedUser = refetchedUsers.find(u => u.id === selectedUser.id);
    
    if (refetchedUser) {
      console.log(`‚úÖ Usu√°rio na lista atualizada: can_access_briefings = ${refetchedUser.can_access_briefings}`);
      
      if (refetchedUser.can_access_briefings === updatedPermissions.can_access_briefings) {
        console.log('‚úÖ Lista de usu√°rios refletindo as altera√ß√µes corretamente!');
      } else {
        console.log('‚ùå PROBLEMA: Lista de usu√°rios n√£o reflete as altera√ß√µes!');
      }
    }
    
    // 10. Resumo final
    console.log('\nüìã RESUMO DA SIMULA√á√ÉO:');
    console.log(`‚úÖ Login do administrador: OK`);
    console.log(`‚úÖ Verifica√ß√£o isAdmin: ${isAdmin ? 'OK' : 'FALHA'}`);
    console.log(`‚úÖ Busca de usu√°rios: OK`);
    console.log(`‚úÖ Edi√ß√£o de permiss√µes: OK`);
    console.log(`‚úÖ Persist√™ncia das altera√ß√µes: OK`);
    console.log(`‚úÖ Refetch da lista: OK`);
    
    console.log('\nüéâ SIMULA√á√ÉO COMPLETA! O frontend deveria estar funcionando.');
    console.log('\nüí° Se o problema persiste no frontend, pode ser:');
    console.log('   1. Problema no localStorage (dados desatualizados)');
    console.log('   2. Problema no contexto de autentica√ß√£o');
    console.log('   3. Problema na renderiza√ß√£o condicional dos bot√µes');
    console.log('   4. Cache do navegador');
    
    console.log('\nüîß Sugest√µes:');
    console.log('   1. Limpar localStorage e fazer login novamente');
    console.log('   2. Verificar se refreshUserData est√° sendo chamado');
    console.log('   3. Verificar console do navegador por erros');
    console.log('   4. Usar o arquivo debug-frontend-auth.html para diagnosticar');
    
  } catch (error) {
    console.error('‚ùå Erro na simula√ß√£o:', error.response?.data || error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Dados da resposta:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

testFrontendSimulation();